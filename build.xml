<?xml version="1.0" encoding="UTF-8"?>
<project name="glossa-interpreter" default="dist" basedir=".">
    
    <description>Builds glossa-interpreter.</description>
    
    <target name="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>
    
    <target name="clean" depends="load-properties-common">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete>
            <fileset dir=".">
                <include name="*.tokens"/>
                <include name="${src.dir}/glossa/grammars/*.md5"/>
                <include name="${src.dir}/glossa/recognizers/GlossaLexer.java"/>
                <include name="${src.dir}/glossa/recognizers/GlossaParser.java"/>
                <include name="${src.dir}/glossa/statictypeanalysis/FirstPass.java"/>
                <include name="${src.dir}/glossa/statictypeanalysis/StaticTypeAnalyzer.java"/>
                <include name="${src.dir}/glossa/interpreter/core/ASTInterpreter.java"/>
            </fileset>
        </delete>
    </target>
    
    <target name="compile" depends="init,pre-compile">
        <path id="build-classpath" path="${build.classpath}" />
        <javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="build-classpath" encoding="UTF-8" />
    	<copy todir="${build.dir}/glossa/resources">
    	    <fileset dir="${src.dir}/glossa/resources"/>
	    </copy>
    </target>
    
    <target name="jar" depends="compile">
        <jar destfile="${dist.dir}/${jar.name}">
          <fileset dir="${build.dir}"/>
          <manifest>
              <attribute name="Manifest-Version" value="1.0"/>
              <attribute name="Created-By" value="${ant.java.version}"/>
              <attribute name="Main-Class" value="${main.class}"/>
              <attribute name="Class-Path" value="${manifest.classpath}"/>
          </manifest>
        </jar>
  </target>
    
    <target name="load-properties-common" unless="properties.set">
        <loadproperties srcfile="build-common.properties" />
        <property name="properties.set" value="true"/>
    </target>
    
    <target name="load-properties" depends="load-properties-common">
        <loadproperties srcfile="build.properties" />
    </target>
    
    <target name="load-properties-linux" depends="load-properties-common">
        <loadproperties srcfile="build-linux.properties" />
    </target>
    
    <target name="dist" depends="load-properties,jar,post-jar" />
    
    <target name="linux-dist" depends="load-properties-linux,jar" />
    
    <target name="pre-compile" depends="generate-antlr3-recognizers,download-jopt" />
    
    <target name="post-jar" if="build.general">
        <copy todir="${dist.dir}/lib">
            <fileset dir="${lib.dir}"/>
        </copy>
    </target>
    
    <target name="create-tarball" depends="clean" if="version">
      <property name="tarball.target.dir" value="${tarballs.dir}/glossa-interpreter-${version}" />
      <property name="tarball.file" value="${tarballs.dir}/glossa-interpreter-${version}.tar.gz" />
      <delete dir="${tarball.target.dir}" />
      <delete file="${tarball.file}" />
      <mkdir dir="${tarball.target.dir}" />
      <copy todir="${tarball.target.dir}/readme">
        <fileset dir="readme"/>
      </copy>
      <copy todir="${tarball.target.dir}/src">
        <fileset dir="src"/>
      </copy>
      <copy file="build.xml" tofile="${tarball.target.dir}/build.xml"/>
      <copy file="glossa-interpreter" tofile="${tarball.target.dir}/glossa-interpreter"/>
      <copy file="Makefile" tofile="${tarball.target.dir}/Makefile"/>
      <copy file="README.mkdn" tofile="${tarball.target.dir}/README.mkdn"/>
      <tar destfile="${tarball.file}" compression="gzip">
          <tarfileset dir="${tarballs.dir}">
              <include name="glossa-interpreter-${version}/**" />
          </tarfileset>
      </tar>
      <delete dir="${tarball.target.dir}" />
      <copy file="${tarball.file}" tofile="${tarballs.dir}/glossa-interpreter-src.tar.gz"/>
    </target>
    
    <target name="set-build-type">
        <condition property="build.linux">
            <istrue value="${linux.build}"/>
        </condition>
        <condition property="build.general">
            <isfalse value="${linux.build}"/>
        </condition>
    </target>

    <target name="check-antlr">
        <available file="${antlr3.jar}" property="antlr.present"/>
        <condition property="antlr.download">
            <and>
                <isfalse value="${linux.build}"/>
                <not>
                  <isset property="antlr.present"/>
                </not>
            </and>
        </condition>
    </target>

    <target name="check-jopt">
        <available file="${joptsimple.jar}" property="jopt.present"/>
        <condition property="jopt.download">
            <and>
                <isfalse value="${linux.build}"/>
                <not>
                  <isset property="jopt.present"/>
                </not>
            </and>
        </condition>
    </target>

    <target name="download-antlr" depends="check-antlr" if="antlr.download">
        <mkdir dir="lib"/>
        <get src="http://www.antlr3.org/download/antlr-3.2.jar" dest="${antlr3.jar}"/>
    </target>

    <target name="download-jopt" depends="check-jopt" if="jopt.download">
        <mkdir dir="lib"/>
        <get src="http://repo2.maven.org/maven2/net/sf/jopt-simple/jopt-simple/3.2/jopt-simple-3.2.jar" dest="${joptsimple.jar}"/>
        <get src="http://repo2.maven.org/maven2/net/sf/jopt-simple/jopt-simple/3.2/jopt-simple-3.2-javadoc.jar" dest="${joptsimple.javadoc}"/>
    </target>
    
    <target name="check-parser">
        <checksum file="${src.dir}/glossa/grammars/Glossa.g" property="parser.checksum" />
        <echo message="${parser.checksum}" file="${src.dir}/glossa/grammars/Glossa.g.new.md5" force="true" />
        
        <condition property="parser.modified" value="true" else="false">
            <not>
                <filesmatch file1="${src.dir}/glossa/grammars/Glossa.g.new.md5" file2="${src.dir}/glossa/grammars/Glossa.g.old.md5" />
            </not>
        </condition>
        
        <copy file="${src.dir}/glossa/grammars/Glossa.g.new.md5" tofile="${src.dir}/glossa/grammars/Glossa.g.old.md5"/>
        
        <condition property="parser.generate" value="true">
            <or>
                <not>
                    <and>
                        <available file="${src.dir}/glossa/recognizers/GlossaLexer.java"/>
                        <available file="${src.dir}/glossa/recognizers/GlossaParser.java"/>
                        <available file="Glossa.tokens"/>
                    </and>
                </not>
                <equals arg1="${parser.modified}" arg2="true" />
            </or>
        </condition>
    </target>
    
    <target name="generate-parser-linux" if="parser.generate" unless="build.general">
        <exec executable="antlr3">
          <arg value="${src.dir}/glossa/grammars/Glossa.g"/>
        </exec>
        <move todir="${src.dir}/glossa/recognizers">
            <fileset dir="${src.dir}/glossa/grammars">
                <include name="GlossaLexer.java"/>
                <include name="GlossaParser.java"/>
            </fileset>
        </move>
    </target>
    
    <target name="generate-parser" depends="download-antlr" if="parser.generate" unless="build.linux">
        <echo message="parser.generate: ${parser.generate}" />
        <java jar="${antlr3.jar}" fork="true" failonerror="true">
            <arg value="${src.dir}/glossa/grammars/Glossa.g"/>
            <classpath>
                <pathelement location="${project.dir}/${antlr3.jar}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>
        <move todir="${src.dir}/glossa/recognizers">
            <fileset dir="${src.dir}/glossa/grammars">
                <include name="GlossaLexer.java"/>
                <include name="GlossaParser.java"/>
            </fileset>
        </move>
    </target>
    
    <target name="check-firts-pass-treeparser">
        <checksum file="${src.dir}/glossa/grammars/FirstPass.g" property="firts-pass-treeparser.checksum" />
        <echo message="${firts-pass-treeparser.checksum}" file="${src.dir}/glossa/grammars/FirstPass.g.new.md5" force="true" />
        
        <condition property="firts-pass-treeparser.modified" value="true" else="false">
            <not>
                <filesmatch file1="${src.dir}/glossa/grammars/FirstPass.g.new.md5" file2="${src.dir}/glossa/grammars/FirstPass.g.old.md5" />
            </not>
        </condition>
        
        <copy file="${src.dir}/glossa/grammars/FirstPass.g.new.md5" tofile="${src.dir}/glossa/grammars/FirstPass.g.old.md5"/>
        
        <condition property="firts-pass-treeparser.generate" value="true">
            <or>
                <not>
                    <and>
                        <available file="${src.dir}/glossa/statictypeanalysis/FirstPass.java"/>
                        <available file="FirstPass.tokens"/>
                    </and>
                </not>
                <equals arg1="${firts-pass-treeparser.modified}" arg2="true" />
            </or>
        </condition>
    </target>
    
    <target name="generate-firts-pass-treeparser-linux" if="firts-pass-treeparser.generate" unless="build.general">
        <exec executable="antlr3">
          <arg value="${src.dir}/glossa/grammars/FirstPass.g"/>
        </exec>
        <move todir="${src.dir}/glossa/statictypeanalysis">
            <fileset dir="${src.dir}/glossa/grammars">
                <include name="FirstPass.java"/>
            </fileset>
        </move>
    </target>

    <target name="generate-firts-pass-treeparser" depends="download-antlr" if="firts-pass-treeparser.generate" unless="build.linux">
        <java jar="${antlr3.jar}" fork="true" failonerror="true">
            <arg value="${src.dir}/glossa/grammars/FirstPass.g"/>
            <classpath>
                <pathelement location="${project.dir}/${antlr3.jar}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>
        <move todir="${src.dir}/glossa/statictypeanalysis">
            <fileset dir="${src.dir}/glossa/grammars">
                <include name="FirstPass.java"/>
            </fileset>
        </move>
    </target>

    <target name="check-type-analyzer">
        <checksum file="${src.dir}/glossa/grammars/StaticTypeAnalyzer.g" property="type-analyzer.checksum" />
        <echo message="${type-analyzer.checksum}" file="${src.dir}/glossa/grammars/StaticTypeAnalyzer.g.new.md5" force="true" />
        
        <condition property="type-analyzer.modified" value="true" else="false">
            <not>
                <filesmatch file1="${src.dir}/glossa/grammars/StaticTypeAnalyzer.g.new.md5" file2="${src.dir}/glossa/grammars/StaticTypeAnalyzer.g.old.md5" />
            </not>
        </condition>
        
        <copy file="${src.dir}/glossa/grammars/StaticTypeAnalyzer.g.new.md5" tofile="${src.dir}/glossa/grammars/StaticTypeAnalyzer.g.old.md5"/>
        
        <condition property="type-analyzer.generate" value="true">
            <or>
                <not>
                    <and>
                        <available file="${src.dir}/glossa/statictypeanalysis/StaticTypeAnalyzer.java"/>
                        <available file="StaticTypeAnalyzer.tokens"/>
                    </and>
                </not>
                <equals arg1="${type-analyzer.modified}" arg2="true" />
            </or>
        </condition>
    </target>
    
    <target name="generate-type-analyzer-linux" if="type-analyzer.generate" unless="build.general">
        <exec executable="antlr3">
          <arg value="${src.dir}/glossa/grammars/StaticTypeAnalyzer.g"/>
        </exec>
        <move todir="${src.dir}/glossa/statictypeanalysis">
            <fileset dir="${src.dir}/glossa/grammars">
                <include name="StaticTypeAnalyzer.java"/>
            </fileset>
        </move>
    </target>
    
    <target name="generate-type-analyzer" depends="download-antlr" if="type-analyzer.generate"  unless="build.linux">
        <java jar="${antlr3.jar}" fork="true" failonerror="true">
            <arg value="${src.dir}/glossa/grammars/StaticTypeAnalyzer.g"/>
            <classpath>
                <pathelement location="${project.dir}/${antlr3.jar}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>
        <move todir="${src.dir}/glossa/statictypeanalysis">
            <fileset dir="${src.dir}/glossa/grammars">
                <include name="StaticTypeAnalyzer.java"/>
            </fileset>
        </move>
    </target>

    <target name="check-AST-interpreter">
        <checksum file="${src.dir}/glossa/grammars/ASTInterpreter.g" property="AST-interpreter.checksum" />
        <echo message="${AST-interpreter.checksum}" file="${src.dir}/glossa/grammars/ASTInterpreter.g.new.md5" force="true" />
        
        <condition property="AST-interpreter.modified" value="true" else="false">
            <not>
                <filesmatch file1="${src.dir}/glossa/grammars/ASTInterpreter.g.new.md5" file2="${src.dir}/glossa/grammars/ASTInterpreter.g.old.md5" />
            </not>
        </condition>
        
        <copy file="${src.dir}/glossa/grammars/ASTInterpreter.g.new.md5" tofile="${src.dir}/glossa/grammars/ASTInterpreter.g.old.md5"/>
        
        <condition property="AST-interpreter.generate" value="true">
            <or>
                <not>
                    <and>
                        <available file="${src.dir}/glossa/interpreter/core/ASTInterpreter.java"/>
                        <available file="ASTInterpreter.tokens"/>
                    </and>
                </not>
                <equals arg1="${AST-interpreter.modified}" arg2="true" />
            </or>
        </condition>
    </target>
    
    <target name="generate-AST-interpreter-linux" if="AST-interpreter.generate" unless="build.general">
        <exec executable="antlr3">
          <arg value="${src.dir}/glossa/grammars/ASTInterpreter.g"/>
        </exec>
        <move todir="${src.dir}/glossa/interpreter/core">
            <fileset dir="${src.dir}/glossa/grammars">
                <include name="ASTInterpreter.java"/>
            </fileset>
        </move>
    </target>
    
    <target name="generate-AST-interpreter" depends="download-antlr" if="AST-interpreter.generate" unless="build.linux">
        <java jar="${antlr3.jar}" fork="true" failonerror="true">
            <arg value="${src.dir}/glossa/grammars/ASTInterpreter.g"/>
            <classpath>
                <pathelement location="${project.dir}/${antlr3.jar}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>
        <move todir="${src.dir}/glossa/interpreter/core">
            <fileset dir="${src.dir}/glossa/grammars">
                <include name="ASTInterpreter.java"/>
            </fileset>
        </move>
    </target>

    <target name="generate-antlr3-recognizers" depends="set-build-type,check-parser,check-firts-pass-treeparser,check-type-analyzer,check-AST-interpreter,generate-parser,generate-firts-pass-treeparser,generate-type-analyzer,generate-AST-interpreter,generate-parser-linux,generate-firts-pass-treeparser-linux,generate-type-analyzer-linux,generate-AST-interpreter-linux" />
    
    
</project>
